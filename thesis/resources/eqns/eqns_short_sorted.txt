sci = 0.761188
protein_intake_data = 0.0
depc_f = 0.176744
ec = -268.0
rmr_b_b = 0.24
read_from_data = 0.0
time_step = 0.526315789474
mass_of_glycerol = 92.0
cal_c = 4.18
fi_0 = 1000.0
gngp_b = 100.0
fetw = 3.0/8.0
bw_b = 70000.0
table_eff_suff_c = [(0.0,0.0),(0.1,0.6),(0.2,0.85),(0.3,0.95),(0.4,1.0),(1.0,1.0)]
depc_p = 0.863636
df_mol_b = 0.16
ci_input = 1500.0
cal_f = 9.44
fwcm = 7.0/10.0
tef_p = 0.25
dc_b = 180.0
ateff = 0.52
rmr_lean_b = 0.0239374
massaa = 110.0
massb = 1400.0
ics = 3967.28
gngeff = 0.8
del_at = 7.0
cal_p = 4.7
tc = 0.8
c_init = 400.0
dp_mol_b = 2.73
c_b = 400.0
fat_intake_data = 0.0
dnleff = 0.8
lipol_min = 0.9
fw = 7.0/10.0
hp = 2.0
tef_f = 0.025
fi_b = fi_0
nc = stock_var__[1] / c_b
tef_c = 0.075
dc = dc_b * stock_var__[1] / c_b
degc_p = 0.172727
fi_input = 1000.0
depc_c = 0.211111
pi_0 = 500.0
hc = 2.7
table_eff_fox_p = [(0.0,0.0),(0.4,0.4),(0.798165,0.627193),(1.30275,0.824561),(2.0,0.95),(3.0,1.0)]
activ_time_data = 0.0
p_init = 8757.0
k_dnl = 2.0
spi = 15.0253
rmr_f_b = 0.0045
ndc = dc / dc_b
mass_tg = 860.0
protein_fraction_of_cell_mass = 0.2
hill_dnl = 4.0
f_init = 5075.0
pi_input = 500.0
acteng_bw_b = 0.0256755
wci = 3.31414
pi_b = pi_0
ci_0 = 1500.0
lipol_max = 3.1
k_lip = log( ( lipol_max - lipol_min ) /( 1.0 - lipol_min ))
sa = 4.0
activ_time_param = 0.0
carbohydrate_intake_data = 0.0
wpi = 0.1
gngf_end_b = df_mol_b * mass_of_glycerol * cal_c
acteff = 1.0 + ateff * stock_var__[0]
molar_caloric_dens_tg = cal_f * mass_tg
fox_p = stock_var__[2] / time_step * cal_f
eff_c_dnl_b = 1.0 / ( k_dnl ** hill_dnl + 1.0 )
molar_caloric_dens_glycerol = cal_c * mass_of_glycerol
__pts_x_0 = array([__x for __x,__y in table_eff_fox_p])
__pts_x_1 = array([__x for __x,__y in table_eff_suff_c])
fiew = (1.0-fetw)/fetw
bm_b = 0.04 * bw_b
activ_time = activ_time_data  if (read_from_data == 1.0) else (activ_time_param )
__pts_y_1 = array([__y for __x,__y in table_eff_suff_c])
__pts_y_0 = array([__y for __x,__y in table_eff_fox_p])
rmreff = 1.0 + ( 1.0 - ateff ) * stock_var__[0]
eff_c_dnl = nc ** hill_dnl / ( k_dnl ** hill_dnl + nc ** hill_dnl )
dp_b = dp_mol_b * massaa
ci_k = carbohydrate_intake_data  if (read_from_data == 1.0) else (ci_input )
pi_k = protein_intake_data  if (read_from_data == 1.0) else (pi_input )
ecw_b = fw * fetw * bw_b
ci_b = ci_0
mass_ffa = ( cal_f * mass_tg - cal_c * mass_of_glycerol ) / ( 3.0 * cal_f)
ci_g = ci_k / cal_c
dnl_b = ci_0 * eff_c_dnl_b
fi_k = fat_intake_data  if (read_from_data == 1.0) else (fi_input )
icw_b = fiew * ecw_b
dci = ci_k - ci_b
fi_g = fi_k / cal_f
mei = ci_k + fi_k + pi_k
ecw = ecw_b
exog_glycerol_per_kcal_fat_intake = mass_of_glycerol / ( cal_f * mass_tg )
ndci = dci / ci_b
eff_suff_c = interpolate.UnivariateSpline(__pts_x_1, __pts_y_1)
rmr_lean = rmr_lean_b * rmreff
eff_ci_gngp = 0.506 * ndci
dnl = ci_g * eff_c_dnl * cal_c
eff_fox_p = interpolate.UnivariateSpline(__pts_x_0, __pts_y_0)
cell_mass_b = 1.0/fwcm * icw_b
mei_b = ci_b + fi_b +pi_b
ciw = fiew * ecw_b - ( hc * c_init + hp * p_init)
tee_b = mei_b
gngf_ex_b = exog_glycerol_per_kcal_fat_intake * fi_0 * cal_c
acteng_bw = acteng_bw_b * ( 1.0 - 0.652218 * activ_time )
icw = hc * stock_var__[1] + hp * stock_var__[3] + ciw
dpi = pi_k - pi_b
pi_g = pi_k / cal_p
gngf_ex = exog_glycerol_per_kcal_fat_intake * fi_k * cal_c
eff_ci_cox = wci * ( 1.0 + sci * ndci )
cell_mass = ics + stock_var__[1] + stock_var__[3] + icw
dnl_o = min( dnl / cal_c , stock_var__[1] / time_step )
p_b = cell_mass_b - icw_b - ics - c_b
tef = tef_c * cal_c * ci_g + tef_f * fi_k + tef_p * cal_p * pi_g
dnl_i = dnl / cal_f
lean_b = bm_b + ecw_b + cell_mass_b
ndpi = dpi / pi_b
acteng_bw_at = acteng_bw * acteff
mbc = rmr_lean * ( cell_mass - massb ) + rmr_b_b * massb + rmr_f_b * stock_var__[2]
ndmei = ( mei - mei_b ) / mei_b
gngf_b = gngf_end_b + gngf_ex_b
dp = dp_b * stock_var__[3] / p_b
atf = ( tc * ndmei - stock_var__[0] ) / del_at
see_b = tee_b - gngp_b - gngf_b
f_b = bw_b - lean_b
nacteng_bw = acteng_bw / acteng_bw_b
lean = bm_b + ecw + cell_mass
kp = ( pi_0 - gngp_b ) / see_b
eff_act_pox = sa * exp( - log(sa) * nacteng_bw )
np = stock_var__[3] / p_b
ndp = dp / dp_b
eff_obes_df = (stock_var__[2] / f_b)**(2.0/3.0)
eff_pi_pox = wpi * ( 1.0 + spi * ndpi )
eff_pi_gngp = 0.306 * ndpi
bw = stock_var__[2] + lean
gngp = max( 0.0 , gngp_b * ( np - eff_ci_gngp + eff_pi_gngp ) )
kc = ( ci_0 - dnl_b ) / see_b
wg = kc / kp * ( 1.0 + wpi )- wci
kf = ( fi_0 + dnl_b - gngf_b ) / see_b
eff_dg_cox = wg * ndc
eff_ci_df = 1.0 + ( ( lipol_max - lipol_min )  * exp( -k_lip * ci_g * cal_c / ci_b )+ lipol_min - 1.0 )/ max( 1.0 , eff_obes_df )
ndf = eff_ci_df * eff_obes_df
carb_term = eff_dg_cox + max( 0.0 , eff_ci_cox * ( stock_var__[1] / (0.1 + stock_var__[1]) )  )
gngp_o = max( 0.0 , gngp / cal_p)
gngp_i = gngp / cal_c
prot_term = ( ndp + max( 0.0, eff_pi_pox )  ) * eff_act_pox
pae = acteng_bw_at * bw
wf = (1.0 + wpi) * kf / kp
gngf_end = gngf_end_b * ndf
gngf = gngf_end + gngf_ex
fat_term = max( 0.0 , wf * ndf)
z_check_1 = wf/kf
z_check_0 = 1.0+wpi+wci+wg+wf
df = df_mol_b * ndf * mass_tg
gngf_o = min( gngf / cal_f , stock_var__[2] / time_step )
mt = ( degc_p + depc_p ) * dp +depc_f * df +depc_c * dc
mc = ( 1.0 - dnleff ) * dnl + ( 1.0- gngeff ) * ( gngf + gngp )
rmr = mbc + mt + mc + ec
tee = pae + rmr + tef
see = tee - gngp - gngf
gngf_i = gngf / cal_c
z = carb_term + fat_term +prot_term
fp = prot_term / z
pox_d = fp * see
fc = carb_term / z
pox_a = pox_d / cal_p
ff = fat_term / z
fox_d = ff * see
pox_k = pox_a * cal_p
cox_d = fc * see + gngf + gngp
fox_a = fox_d / cal_f * eff_fox_p( fox_p / fox_d )
suff_c = stock_var__[1] * cal_c / cox_d
fox_k = fox_a * cal_f
gap_f = fox_d - fox_a * cal_f
cox_a = cox_d / cal_c * eff_suff_c( suff_c )
is_sufficient_fat = 1.0  if (gap_f < 0.1 ) else (0.0 )
cox_k = cox_a * cal_c
ox_p = cox_k + fox_k + pox_k
gap_c = cox_d - cox_a * cal_c
gap = gap_c + gap_f
is_sufficient_carb = 1.0 if (gap_c < 0.1 ) else (0.0 )
y = prot_term + is_sufficient_carb * carb_term + is_sufficient_fat * fat_term
fc_s = is_sufficient_carb * carb_term / y
cox_s = fc_s * gap / cal_c
fp_s = prot_term / y
ff_s = is_sufficient_fat * fat_term / y
fox_s = ff_s * gap / cal_f
cox_s_k = cox_s * cal_c
pox_s = fp_s * gap / cal_p
fox_s_k = fox_s * cal_f
pox_s_k = pox_s * cal_p
ox_s = cox_s_k + fox_s_k + pox_s_k
ox = ox_p + ox_s
d_ox_tee = 0.0 if (ox - tee < 0.1) else (ox - tee )